import { formatDate, activateTab, confirmAction } from './utils.js';
import { populateWorkoutForm } from './workout.js';
import { populateDiaryForm } from './daily-tracker.js';
import { initExport } from "./export.js";

export function initHistory(dataManager) {
    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
    initExport(dataManager);

    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –±–ª–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
    const dataControls = document.getElementById('data-controls');
    const exportSection = initExport(dataManager);
    if (dataControls && exportSection) {
        dataControls.appendChild(exportSection);
    }
    const historyTab = document.getElementById('history');
    historyTab.insertBefore(exportSection, historyTab.firstChild); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    loadHistoryData(dataManager);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('export-range')?.addEventListener('change', () => loadHistoryData(dataManager));
    document.getElementById('start-date')?.addEventListener('change', () => loadHistoryData(dataManager));
    document.getElementById('end-date')?.addEventListener('change', () => loadHistoryData(dataManager));

    dataManager.on('entry-updated', () => loadHistoryData(dataManager));
    dataManager.on('entry-deleted', () => loadHistoryData(dataManager));
}

export function loadHistoryData(dataManager) {
    const historyList = document.getElementById('history-list');
    const historyTab = document.getElementById('history');

    if (!historyList || !historyTab) return;

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    historyList.innerHTML = '';

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–∑ –±–ª–æ–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    const rangeSelector = document.getElementById('export-range');
    const range = rangeSelector ? rangeSelector.value : 'all';

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞—Ç—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã
    let startDate, endDate;
    if (range === 'custom') {
        const startInput = document.getElementById('start-date');
        const endInput = document.getElementById('end-date');

        startDate = startInput?.value ? new Date(startInput.value) : null;
        endDate = endInput?.value ? new Date(endInput.value) : null;

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if (startDate) startDate.setHours(0, 0, 0, 0);
        if (endDate) endDate.setHours(23, 59, 59, 999);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
    const allEntries = dataManager.getAllEntries().filter(entry => {
        if (!entry.date || entry.isDraft) return false;

        const entryDate = new Date(entry.date);
        entryDate.setHours(12, 0, 0, 0); // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
        switch (range) {
            case 'current-week':
                const today = new Date();
                const startOfWeek = new Date(today);
                startOfWeek.setDate(today.getDate() - today.getDay() + (today.getDay() === 0 ? -6 : 1));
                startOfWeek.setHours(0, 0, 0, 0);
                return entryDate >= startOfWeek;

            case 'last-week':
                const lastWeekStart = new Date();
                lastWeekStart.setDate(lastWeekStart.getDate() - lastWeekStart.getDay() - 6);
                lastWeekStart.setHours(0, 0, 0, 0);
                const lastWeekEnd = new Date(lastWeekStart);
                lastWeekEnd.setDate(lastWeekStart.getDate() + 6);
                lastWeekEnd.setHours(23, 59, 59, 999);
                return entryDate >= lastWeekStart && entryDate <= lastWeekEnd;

            case 'custom':
                if (!startDate || !endDate) return true;
                return entryDate >= startDate && entryDate <= endDate;

            default: // 'all'
                return true;
        }
    });

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–∞—Ç–µ
    const entriesByDate = {};
    allEntries.forEach(entry => {
        if (!entriesByDate[entry.date]) {
            entriesByDate[entry.date] = { diary: [], training: [] };
        }

        if (entry.type === 'diary') {
            entriesByDate[entry.date].diary.push(entry);
        } else if (entry.type === 'training') {
            entriesByDate[entry.date].training.push(entry);
        }
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    const dates = Object.keys(entriesByDate).sort((a, b) =>
        new Date(b).getTime() - new Date(a).getTime()
    );

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (dates.length === 0) {
        historyList.innerHTML = '<div class="empty-history">–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –ø—É—Å—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</div>';
        return;
    }

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    dates.forEach(date => {
        const dateSection = document.createElement('div');
        dateSection.className = 'history-date-section';

        const dateHeader = document.createElement('h3');
        dateHeader.className = 'history-date-header';
        dateHeader.textContent = formatDate(new Date(date), {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        dateSection.appendChild(dateHeader);

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if (entriesByDate[date].diary.length > 0) {
            entriesByDate[date].diary.forEach(entry => {
                dateSection.appendChild(createDiaryEntryElement(entry, date));
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if (entriesByDate[date].training.length > 0) {
            const workoutHeader = document.createElement('h4');
            workoutHeader.className = 'workout-header';
            workoutHeader.textContent = '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏';
            dateSection.appendChild(workoutHeader);

            entriesByDate[date].training.forEach(entry => {
                dateSection.appendChild(createTrainingEntryElement(entry));
            });
        }

        historyList.appendChild(dateSection);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEntryEventHandlers(dataManager);
}

function createDiaryEntryElement(entry, date) {
    const data = entry.data;
    let weighingsHtml = '';

    if (data.weighings?.length > 0) {
        weighingsHtml = '<p>–í–∑–≤–µ—à–∏–≤–∞–Ω–∏—è:</p><ul class="weighings-list">';
        data.weighings.forEach(w => {
            weighingsHtml += `<li>${w.weight} –∫–≥${w.condition ? ` (${w.condition})` : ''}</li>`;
        });
        weighingsHtml += '</ul>';
    } else if (data.weight) {
        weighingsHtml = `<p>–í–µ—Å: ${data.weight} –∫–≥${data.weightCondition ? ` (${data.weightCondition})` : ''}</p>`;
    }

    const entryEl = document.createElement('div');
    entryEl.className = 'history-entry';
    entryEl.innerHTML = `
        <div class="entry-header">
            <span class="entry-time">${data.time || '–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏'}</span>
            <div class="entry-actions">
                <button class="edit-btn" data-type="diary" data-date="${date}" data-id="${entry.id}">‚úèÔ∏è</button>
                <button class="delete-btn" data-type="diary" data-date="${date}" data-id="${entry.id}">üóëÔ∏è</button>
            </div>
        </div>
        ${data.pulse ? `<p>–ü—É–ª—å—Å: ${data.pulse} —É–¥/–º–∏–Ω</p>` : ''}
        ${data.sleepDuration ? `<p>–°–æ–Ω: ${data.sleepDuration}</p>` : ''}
        ${weighingsHtml}
        ${data.steps ? `<p>–®–∞–≥–∏: ${data.steps}</p>` : ''}
        ${data.calories ? `<p>–ö–∞–ª–æ—Ä–∏–∏: ${data.calories}</p>` : ''}
        ${data.alcohol ? `<p>–ê–ª–∫–æ–≥–æ–ª—å: ${data.alcohol}</p>` : ''}
        ${data.workout ? `<p>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${data.workout}</p>` : ''}
        ${data.rpe ? `<p>RPE: ${data.rpe}</p>` : ''}
        ${data.mood ? `<p>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${data.mood}</p>` : ''}
        ${data.notes ? `<p>–ó–∞–º–µ—Ç–∫–∏: ${data.notes}</p>` : ''}
    `;
    return entryEl;
}

function setupEntryEventHandlers(dataManager) {
    document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const type = this.dataset.type;
            const date = this.dataset.date;
            const id = this.dataset.id;
            editEntry(type, date, id, dataManager);
        });
    });

    document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            if (confirmAction('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
                const id = this.dataset.id;
                dataManager.deleteEntry(id);
            }
        });
    });
}

function createTrainingEntryElement(entry) {
    const exercise = entry.data;
    const exerciseEl = document.createElement('div');
    exerciseEl.className = 'history-exercise';

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—ã
    let setsHtml = '';
    if (Array.isArray(exercise.sets)) {
        setsHtml = exercise.sets.map(set =>
            `<p>${set.weight} –∫–≥ √ó ${set.reps} –ø–æ–≤—Ç.${set.perLimb ? ' (–Ω–∞ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å)' : ''}</p>`
        ).join('');
    }

    exerciseEl.innerHTML = `
        <div class="entry-header">
            <span>${exercise.name}</span>
            <div class="entry-actions">
                <button class="edit-btn" 
                        data-type="training" 
                        data-date="${entry.date}" 
                        data-id="${entry.id}">‚úèÔ∏è</button>
                <button class="delete-btn" 
                        data-type="training" 
                        data-date="${entry.date}" 
                        data-id="${entry.id}">üóëÔ∏è</button>
            </div>
        </div>
        <div class="exercise-sets">${setsHtml}</div>
    `;
    return exerciseEl;
}

export function editEntry(type, date, id, dataManager) {
    const entry = dataManager.getAllEntries().find(e => e.id == id);
    if (!entry) return;

    if (type === 'training') {
        activateTab('workout');
        populateWorkoutForm(entry);
        const workoutForm = document.getElementById('workout-form');
        if (workoutForm) {
            workoutForm.dataset.editing = `${date}|${id}`;
        }
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞
    else if (type === 'diary') {
        activateTab('daily');
        populateDiaryForm(entry); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        const diaryForm = document.getElementById('diary-form');
        if (diaryForm) {
            diaryForm.dataset.editing = id;
        }
    }
}
